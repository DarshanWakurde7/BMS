import 'package:bms/Screens/LeaveTracker.dart';
import 'package:bms/pojos/models/CardPojodata.dart';
import 'package:bms/pojos/models/Commentpojo.dart';
import 'package:bms/pojos/models/Enquirepojo.dart';
import 'package:bms/pojos/models/FilterDataPojo.dart';

import 'package:bms/pojos/models/TimesheetPojo.dart';
import 'package:bms/pojos/models/enquireComment.dart';
import 'package:bms/pojos/models/getAllDataofEnquireCard.dart';
import 'package:bms/pojos/models/snoozedPojo.dart';
import 'package:bms/widgets/enquireCommentCard.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;

List<Autogenerated> dataOfCards = <Autogenerated>[];
List<Autogenerated> dataofCardClear = [];
List<String> myStatus = [];
List<String> getTasks = [];
List<String> myCategories = [];
List<String> myprority = [];
List<Commentpojo> myComment = [];
List<TimeSheetPojo> timeSheet = [];

class ApiCalls {
  // static String baseurl="https://pw-bms-dev.portalwiz.in/laravelapi/public/api/";
  static String baseurl = "https://portalwiz.net/laravelapi/public/api/";

  static Future<dynamic> getDataofCards(String status_id) async {
    dataOfCards.clear();
    var pref = await SharedPreferences.getInstance();

    try {
      Uri uri = Uri.parse('${baseurl}fetch_project_tasks_by_user');

      var body = {
        "account_id": pref.getInt('account_id').toString(),
        "user_id": pref.getInt('user_id').toString(),
        "role_id": pref.getInt('role_id').toString(),
        "status_group_id": status_id,
      };

      var response = await http.post(uri, body: body);
      var data = jsonDecode(response.body);

      for (Map<String, dynamic> i in data) {
        dataOfCards.add(Autogenerated.fromJson(i));
      }
    } catch (e) {
      print(e);
    }
  }

  static Future<dynamic> getStatus(String accid) async {
    var body2 = {
      "account_id": accid,
    };

    Uri uri2 = Uri.parse('${baseurl}fetch_task_status?');
    Uri uripriority = Uri.parse('${baseurl}fetch_priority');
    try {
      var response2 = await http.post(uri2, body: body2);
      var status = jsonDecode(response2.body.toString());
      var responsepriority = await http.get(uripriority);
      var priority = jsonDecode(responsepriority.body.toString());

      myStatus.clear();
      for (Map<String, dynamic> i in status) {
        myStatus.add(i["task_status"]);
      }
      myprority.clear();
      for (Map<String, dynamic> i in priority) {
        myprority.add(i['priority']);
      }
    } catch (E) {
      print(E);
    }
  }

  static Future<void> getComments(
      int accid, int projectid, int projectTaskId) async {
    var body = {
      "account_id": accid.toString(),
      "project_id": projectid.toString(),
      "project_task_id": projectTaskId.toString()
    };
    try {
      Uri url = Uri.parse("${baseurl}fetch_task_comment?");

      final response = await http.post(url, body: body);

      if (response.statusCode == 200) {
        myComment.clear();
        for (Map<String, dynamic> i in jsonDecode(response.body.toString())) {
          myComment.add(Commentpojo.fromJson(i));
        }
      }
    } catch (e) {
      print(e);
    }
  }

//----------------------------------------------------
  static Future<void> getProjectComment(int accid, int projectid) async {
    var body = {
      "account_id": accid.toString(),
      "project_id": projectid.toString(),
    };

    Uri url = Uri.parse("${baseurl}fetch_project_comment?");
    try {
      final response = await http.post(url, body: body);

      if (response.statusCode == 200) {
        myComment.clear();
        for (Map<String, dynamic> i in jsonDecode(response.body.toString())) {
          myComment.add(Commentpojo.fromJson(i));
        }
      }
    } catch (e) {
      print(e);
    }
  }

  static Future<bool> postComment(int accid, int projectid, int projectTaskId,
      int createby, String message, int useid) async {
    var body = {
      "account_id": accid.toString(),
      "project_id": projectid.toString(),
      "project_task_id": projectTaskId.toString(),
      "created_by": createby.toString(),
      "message": message,
      "user_id": useid.toString(),
    };

    Uri url = Uri.parse("${baseurl}add_task_comment?");

    final response = await http.post(url, body: body);

    if (response.statusCode == 200) {
      return true;
    } else {
      return false;
    }
  }

  static Future<dynamic> getDataofTimeShaeet(int accid, int userid) async {
    var body = {
      "account_id": accid.toString(),
      "user_id": userid.toString(),
    };

// var body={
//     "account_id": "1100",
//     "user_id": 97.toString()
// };

    Uri url = Uri.parse("${baseurl}fetch_timesheet_by_user?");

    final response = await http.post(url, body: body);

    if (response.statusCode == 200) {
      timeSheet.clear();
      for (Map<String, dynamic> i in jsonDecode(response.body.toString())) {
        timeSheet.add(TimeSheetPojo.fromJson(i));
      }
    }
  }

  static Future<dynamic> deleteTaskbyUser(
      int accid, int projectid, BuildContext context) async {
    var body = {
      "account_id": accid.toString(),
      "project_id": projectid.toString(),
    };

    Uri url = Uri.parse("${baseurl}delete_project_task?");

    final response = await http.post(url, body: body);

    if (response.statusCode == 200) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          backgroundColor: Colors.redAccent,
          content: Text(jsonDecode(response.body.toString())['message'])));
    }
  }

  static Future<dynamic> gettaskByUser(int accid) async {
    var body = {
      "account_id": accid.toString(),
    };

    Uri url = Uri.parse("${baseurl}fetch_task_types?");

    final response = await http.post(url, body: body);

    if (response.statusCode == 200) {
      getTasks.clear();

      for (Map<String, dynamic> i in jsonDecode(response.body.toString())) {
        getTasks.add(i["task_type"]);
      }
    }
  }

  static Future<dynamic> gettaskCategory(int accid) async {
    var body = {
      "account_id": accid.toString(),
    };

    Uri url = Uri.parse("${baseurl}fetch_task_categories?");

    final response = await http.post(url, body: body);

    if (response.statusCode == 200) {
      myCategories.clear();

      for (Map<String, dynamic> i in jsonDecode(response.body.toString())) {
        myCategories.add(i["task_category"] ?? "");
      }
    }
  }

  static Future<dynamic> getUsersByTask(int accid, List<int> projectid) async {
    Uri url = Uri.parse("${baseurl}fetch_users_by_projects");

    var body = jsonEncode({
      "account_id": accid.toString(),
      "project_id": projectid,
    });

    final response = await http.post(url, body: jsonEncode(body));
    if (response.statusCode == 200) {
      print(jsonDecode(response.body.toString()));
      print(body.runtimeType);
    } else {
      print(response.statusCode);
    }
  }

  static Future<void> getTimesheetbyTask(int accid, int taskid) async {
    Uri url = Uri.parse("${baseurl}fetch_timesheet_by_task?");

    var body = {
      "account_id": accid.toString(),
      "task_id": taskid.toString(),
    };

    final response = await http.post(url, body: body);
    if (response.statusCode == 200) {
      timeSheet.clear();

      for (Map<String, dynamic> i in jsonDecode(response.body.toString())) {
        timeSheet.add(TimeSheetPojo.fromJson(i));
      }
    } else {}
  }

  static Future<dynamic> addTimeSheetOfProject(
      int project_task_id,
      int accid,
      int projectid,
      String startdate,
      String enddate,
      int taskStatus,
      int prorityid,
      int assignedto,
      int createdBy,
      String taskdesc,
      String reported_date,
      String comment,
      String startTime,
      String endTime) async {
    var body = {
      "project_task_id": project_task_id,
      "account_id": accid,
      "project_id": projectid,
      "act_start_date": startdate,
      "act_end_date": enddate,
      "task_status": taskStatus,
      "priority_id": prorityid,
      "assinged_to": assignedto,
      "created_by": createdBy,
      "task_desc": taskdesc,
      "reported_date": reported_date,
      "reported_time": null,
      "comment": comment,
      "start_time": startTime,
      "end_time": endTime
    };

    Uri url = Uri.parse("${baseurl}update_project_task_by_user?");
    http.Response response = await http.post(
      url,
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(body),
    );
// print(body)

    if (response.statusCode == 200) {
      print("okkk added");
      print(response.body);
    } else {
      print(response.body);
    }
  }

  static Future<List<SnozzedClassPojo>> getSnoozedData() async {
    List<SnozzedClassPojo> snoozedData = [];
    var pref = await SharedPreferences.getInstance();
    var body = {
      "account_id": pref.getInt('account_id').toString(),
      "user_id": pref.getInt('user_id').toString(),
      "role_id": pref.getInt('role_id').toString(),
    };

    Uri url = Uri.parse("${baseurl}fetch_snooze_task");

    final response = await http.post(url, body: body);

    for (Map<String, dynamic> i in jsonDecode(response.body)) {
      snoozedData.add(SnozzedClassPojo.fromJson(i));
    }

    return snoozedData;
  }

  static Future<List<EnquiresPojo>> getEnquireCard(
      String id,
      List<int> enqids,
      List<int> assigned,
      List enqsource,
      List enqType,
      String createdDatefrom,
      String createdDateto,
      String updatedfromdate,
      String updatedtodate,
      String enqfromdate,
      String enqtodate,
      String enqCount) async {
    List<EnquiresPojo> enquireData = [];
    DateTime dateTime = DateTime.now();
    String date = "${dateTime.month}/${dateTime.day}/${dateTime.year}";

    Map<String, dynamic> requestBody = {
      "account_id": id,
      "enquiry_status_id": enqids.isEmpty ? null : enqids,
      "assigned_to": assigned.isEmpty ? null : assigned,
      "enquiry_sources": enqsource.isEmpty ? null : enqsource,
      "enquiry_type": enqType.isEmpty ? null : enqType,
      "created_from_date":
          createdDatefrom.isEmpty ? "09/24/2022" : createdDatefrom,
      "created_to_date": createdDateto.isEmpty ? date : createdDateto,
      "updated_from_date": updatedfromdate.isEmpty ? null : updatedfromdate,
      "updated_to_date": updatedtodate.isEmpty ? null : updatedtodate,
      "enquiry_from_date": enqfromdate.isEmpty ? null : enqfromdate,
      "enquiry_to_date": enqtodate.isEmpty ? null : enqtodate,
      "enq_count": "50"
    };

    try {
      String jsonBody = jsonEncode(requestBody);
      Uri url = Uri.parse("${baseurl}filtered_enquiries");
      http.Response response = await http.post(
        url,
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
        },
        body: jsonBody,
      );

      print("Request Body: $jsonBody");
      print("Response Status: ${response.statusCode}");
      print("Response Body: ${response.body}");

      if (response.statusCode == 200) {
        List<dynamic> jsonData = jsonDecode(response.body);
        for (Map<String, dynamic> item in jsonData) {
          enquireData.add(EnquiresPojo.fromJson(item));
        }
      } else {
        print('Failed to load enquiries');
      }
    } catch (e) {
      print(e);
    }

    return enquireData;
  }

  static String customJsonEncode(Object object) {
    if (object == null) {
      return 'null';
    }
    return json.encode(object);
  }

  static Future<String> addEnquireCall(
      String fname,
      String lname,
      String phone,
      String email,
      String state,
      String city,
      String enq_detail_msg,
      String whatsapp_no,
      String company_name,
      String created_by,
      String account_id,
      String enquiry_date,
      String data_source,
      String address,
      String enquiry_type_id,
      String applicant_type_id,
      String enquiry_mode_id,
      String lead_level_id,
      String enquiry_status_id,
      String assigned_to,
      String estimated_closure_date,
      String next_appointment_date,
      String notes) async {
    // Helper function to handle null values
    dynamic encodeValue(dynamic value) {
      return value.isEmpty ? null : value;
    }

    var requestBody = {
      "fname": encodeValue(fname),
      "lname": encodeValue(lname),
      "phone": encodeValue(phone),
      "email": encodeValue(email),
      "state": encodeValue(state),
      "city": encodeValue(city),
      "pan_number": "",
      "enq_detail_msg": encodeValue(enq_detail_msg),
      "whatsapp_no": encodeValue(whatsapp_no),
      "loan_amount": "",
      "company_name": encodeValue(company_name),
      "pin": "",
      "created_by": encodeValue(created_by),
      "account_id": encodeValue(account_id),
      "enquiry_date": encodeValue(enquiry_date),
      "loan_type": "",
      "data_source": encodeValue(data_source),
      "address": encodeValue(address),
      "enquiry_type_id": encodeValue(enquiry_type_id),
      "applicant_type_id": encodeValue(applicant_type_id),
      "enquiry_mode_id": encodeValue(enquiry_mode_id),
      "lead_level_id": encodeValue(lead_level_id),
      "enquiry_status_id": encodeValue(enquiry_status_id),
      "assigned_to": encodeValue(assigned_to),
      "estimated_closure_date": encodeValue(estimated_closure_date),
      "next_appointment_date": encodeValue(next_appointment_date),
      "notes": encodeValue(notes),
    };

    print(customJsonEncode(requestBody));

    try {
      Uri url = Uri.parse("${baseurl}add_enquiry");
      http.Response response = await http.post(
        url,
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
        },
        body: customJsonEncode(requestBody), // Encode the body as JSON
      );

      print(response.body);

      return jsonDecode(response.body)['message'];
    } catch (e) {
      print(e);
      return "Something Went Wrong";
    }
  }

  static Future<GetAllDropdownEnquire> getAllDropDOwnsEnquire() async {
    var pref = await SharedPreferences.getInstance();
    Uri url = Uri.parse(
        "${baseurl}enquiry_dropdown/${pref.getInt('account_id') ?? 1}");

    final response = await http.get(url);

    print(response.body);

    return GetAllDropdownEnquire.fromJson(jsonDecode(response.body));
  }

  static Future<GetAllDataofEnquire> getFullDataOfEnquire(int id) async {
    Uri url = Uri.parse("${baseurl}enquiry_details");

    final response = await http.post(url, body: {
      "enquiry_id": "${id}",
    });

    print("-------------55--------------");
    print(response.body);
    print("-------------66--------------");
    return GetAllDataofEnquire.fromJson(jsonDecode(response.body)[0]);
  }

  static Future<String> postEnquireCOmments(
      String SendtoCustomer,
      String Enqid,
      String followupdate,
      String commentStatusid,
      String profilepath,
      String message,
      String createdby,
      String accountid) async {
    Uri url = Uri.parse("${baseurl}add_commentlog");

    var body = {
      "send_to_customer": SendtoCustomer,
      "enquiry_id": Enqid,
      "follow_up_date": followupdate,
      "comment_status_id": commentStatusid,
      "profile_path": profilepath,
      "message": message,
      "created_by": createdby,
      "account_id": accountid
    };
    final response = await http.post(url, body: body);

    return (jsonDecode(response.body)['message']);
  }

  static Future<List<EnquiresCommentss>> getEnquireComment(
      String accid, String enqid) async {
    List<EnquiresCommentss> enquireComment = [];
    try {
      Uri url = Uri.parse("${baseurl}fetch_comment_log");
      print(accid);
      print(enqid);

      var body = {"account_id": accid, "enquiry_id": enqid};

      final response = await http.post(url, body: body);

      // print(response.body);

      for (Map<String, dynamic> i in jsonDecode(response.body)) {
        enquireComment.add(EnquiresCommentss.fromJson(i));
      }
      return enquireComment;
    } on Exception catch (e) {
      print(e);
      return enquireComment;
    } catch (e) {
      print(e);
      return enquireComment;
    }
  }

  static Future<String> updateProjectTaskByUser(Autogenerated cardData) async {
    Uri url = Uri.parse("${baseurl}update_project_task_by_user");

    var body = {
      "account_id": cardData.accountId,
      "project_task_id": cardData.projectTaskId,
      "project_id": cardData.projectId,
      "task_type": cardData.taskType,
      "phase_id": cardData.phaseId,
      "task_name": cardData.taskName,
      "task_category": cardData.taskCategory,
      "est_start_date": cardData.estStartDate,
      "est_end_date": cardData.estEndDate,
      "plan_start_date": cardData.planStartDate,
      "plan_end_date": cardData.planEndDate,
      "act_start_date": cardData.actStartDate,
      "act_end_date": cardData.actEndDate,
      "task_status": cardData.taskStatus,
      "priority_id": cardData.priorityId,
      "sequence": cardData.sequence,
      "assinged_to": cardData.assingedTo,
      "collaborators_id": (cardData.collaborators ?? []).join(','),
      "est_efforts": cardData.estEfforts,
      "due_date": cardData.dueDate,
      "ext_efforts": "",
      "act_efforts": cardData.actEfforts,
      "start_time": cardData.startTime,
      "focus": cardData.focus,
      "invoiced": cardData.invoiced,
      "billable": cardData.billable,
      "snooze_task": cardData.snoozeTask,
      "snooze_date": cardData.snoozeDate,
      "edit_mode": cardData.editMode,
      "created_by": cardData.createdBy,
      "created_at": cardData.createdAt,
      "updated_by": cardData.updatedBy,
      "updated_at": cardData.updatedAt,
      "attachment": cardData.attachment,
      "task_desc": cardData.taskDesc,
      "ref_project_task_id": cardData.refProjectTaskId,
      "reported_date": cardData.reportedDate,
      "reported_time": cardData.reportedTime,
      "end_time": cardData.endTime,
      "assinged_name": cardData.assingedName,
      "my_efforts": cardData.myEfforts,
      "all_efforts": cardData.allEfforts,
      "task_day_ago": cardData.taskDayAgo,
      "project_name": cardData.projectName,
      "priority_name": cardData.priorityName,
      "task_type_name": cardData.taskTypeName,
      "task_category_name": cardData.taskCategoryName,
      "focus_id": cardData.focusId,
      "collaborators": cardData.collaborators,
      "status": cardData.status,
      "status_group": cardData.statusGroup
    };
    http.Response response = await http.post(
      url,
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(body),
    );

    print(response.body);

    return jsonDecode(response.body)['message'];
  }

  static Future<void> addLeave({
    required int accountId,
    required int employeeId,
    required int requestTypeId,
    required int noOfDays,
    required String reason,
    required String dateFrom,
    required String dateTo,
    required String returnToOffice,
    required int createdBy,
    required String attachment,
  }) async {
    final url = Uri.parse(
        'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/add_leave');

    var request = http.MultipartRequest('POST', url)
      ..fields['account_id'] = accountId.toString()
      ..fields['employee_id'] = employeeId.toString()
      ..fields['request_type_id'] = requestTypeId.toString()
      ..fields['no_of_days'] = noOfDays.toString()
      ..fields['reason'] = reason
      ..fields['date_from'] = dateFrom
      ..fields['date_to'] = dateTo
      ..fields['return_to_office'] = returnToOffice
      ..fields['created_by'] = createdBy.toString();

    if (attachment.isNotEmpty) {
      var file = await http.MultipartFile.fromPath('attachment', attachment);
      request.files.add(file);
    }

    try {
      var response = await request.send();

      if (response.statusCode == 200) {
        print('Leave request submitted successfully');
      } else {
        print(
            'Failed to submit leave request. Error: ${response.reasonPhrase}');
      }
    } catch (e) {
      print('Failed to submit leave request. Exception: $e');
    }
  }

  static Future<List<dynamic>> fetchAllLeave(String accountId) async {
    final response = await http.post(
      Uri.parse(
          'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/fetch_all_leave'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, String>{
        'account_id': accountId,
      }),
    );

    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else {
      throw Exception('Failed to load leave data');
    }
  }

  static Future<List<LeaveHistory>> fetchSingleEmployeeLeave() async {
    final response = await http.post(
      Uri.parse(
          'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/fetch_single_employee_leave'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, dynamic>{
        'account_id': '1',
        'employee_id': 1,
      }),
    );

    if (response.statusCode == 200) {
      List jsonResponse = json.decode(response.body);
      SharedPreferences prefs = await SharedPreferences.getInstance();
      List<String> requestTypeIds = [];
      for (var leave in jsonResponse) {
        requestTypeIds.add(leave['request_type_id'].toString());
      }
      prefs.setStringList('request_type_ids', requestTypeIds);

      return jsonResponse.map((leave) => LeaveHistory.fromJson(leave)).toList();
    } else {
      throw Exception('Failed to load leave history');
    }
  }

  static Future<Map<String, dynamic>> fetchTotalLeaves() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String> requestTypeIds = prefs.getStringList('request_type_ids') ?? [];

    final response = await http.post(
      Uri.parse(
          'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/fetch_total_leaves'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, dynamic>{
        'account_id': '1',
        'employee_id': 2,
        'request_type_id':
            requestTypeIds.isNotEmpty ? requestTypeIds.last : '0',
      }),
    );

    if (response.statusCode == 200) {
      Map<String, dynamic> responseData = json.decode(response.body);

      return responseData;
    } else {
      throw Exception('Failed to load total leaves');
    }
  }

  static Future<void> updateLeaveStatus(
      String leaveId, String leaveStatusId, String comment) async {
    final response = await http.post(
      Uri.parse(
          'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/update_leave'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, dynamic>{
        'account_id': '1',
        'leave_id': leaveId,
        'employee_id': '1',
        'leave_status_id': leaveStatusId,
        'comment': comment,
        'updated_by': 1,
      }),
    );

    if (response.statusCode == 200) {
      print('Leave status updated!');
    } else {
      throw Exception('Failed to update leave status');
    }
  }

  static Future<void> addWFH({
    required String accountId,
    required int employeeId,
    required int noOfDays,
    required String reason,
    required String dateFrom,
    required String dateTo,
    required String returnToOffice,
    required int createdBy,
  }) async {
    final url = Uri.parse(
        'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/add_wfh');
    final response = await http.post(
      url,
      body: jsonEncode({
        "account_id": accountId,
        "employee_id": employeeId,
        "no_of_days": noOfDays.toString(),
        "reason": reason,
        "date_from": dateFrom,
        "date_to": dateTo,
        "return_to_office": returnToOffice,
        "created_by": createdBy
      }),
      headers: {
        'Content-Type': 'application/json',
      },
    );

    if (response.statusCode == 200) {
      print(jsonDecode(response.body)['message']);
    } else {
      print('Failed to submit work from home request');
    }
  }

  static Future<List<dynamic>> fetchAllWFH(String accountId) async {
    final response = await http.post(
      Uri.parse(
          'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/fetch_all_wfh'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, String>{
        'account_id': accountId,
      }),
    );

    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else {
      throw Exception('Failed to load work-from-home data');
    }
  }

  static Future<List<WfhHistory>> fetchSingleEmployeeWFH() async {
    final response = await http.post(
      Uri.parse(
          'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/fetch_single_employee_wfh'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, String>{
        'account_id': '1',
        'employee_id': '4',
      }),
    );
    if (response.statusCode == 200) {
      return List<WfhHistory>.from(
          jsonDecode(response.body).map((x) => WfhHistory.fromJson(x)));
    } else {
      throw Exception('Failed to load WFH history');
    }
  }

  static Future<void> updateWFHStatus(
      String wfhId, String status, String comment) async {
    final String apiUrl =
        'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/update_wfh';
    final response = await http.post(Uri.parse(apiUrl), body: {
      "account_id": "1",
      "wfh_id": wfhId,
      "wfh_status": status,
      "comment": comment,
      "updated_by": "1"
    });
    if (response.statusCode == 200) {
      print('WFH status updated successfully');
    } else {
      throw Exception('Failed to update WFH status');
    }
  }

  static Future<List<dynamic>> fetchApprovedLeaves(
      String accountId, String employeeId) async {
    final response = await http.post(
      Uri.parse(
          'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/fetch_approved_leaves'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, String>{
        'account_id': accountId,
        'employee_id': employeeId,
      }),
    );

    if (response.statusCode == 200) {
      return jsonDecode(response.body) as List<dynamic>;
    } else {
      throw Exception('Failed to fetch approved leaves');
    }
  }

  static Future<List<dynamic>> fetchDeniedLeaves(
      String accountId, String employeeId) async {
    final response = await http.post(
      Uri.parse(
          'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/fetch_cancelled_leaves'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, String>{
        'account_id': accountId,
        'employee_id': employeeId,
      }),
    );

    if (response.statusCode == 200) {
      return jsonDecode(response.body) as List<dynamic>;
    } else {
      throw Exception('Failed to fetch cancelled leaves');
    }
  }

  static Future<Map<String, dynamic>> fetchCasualLeaves() async {
    final url =
        'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/fetch_casual_leaves';
    final headers = {
      'Content-Type': 'application/json',
    };
    final body = {"account_id": 1, "employee_id": 4};

    try {
      final response = await http.post(
        Uri.parse(url),
        headers: headers,
        body: json.encode(body),
      );

      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        throw Exception('Failed to fetch casual leaves');
      }
    } catch (e) {
      throw Exception('Failed to fetch casual leaves: $e');
    }
  }

  static Future<Map<String, dynamic>> fetchSickLeaves() async {
    final url =
        'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/fetch_sick_leaves';
    final headers = {
      'Content-Type': 'application/json',
    };
    final body = {"account_id": 1, "employee_id": 4};

    try {
      final response = await http.post(
        Uri.parse(url),
        headers: headers,
        body: json.encode(body),
      );

      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        throw Exception('Failed to fetch sick leaves');
      }
    } catch (e) {
      throw Exception('Failed to fetch sick leaves: $e');
    }
  }

  static Future<Map<String, dynamic>> fetchElectiveLeaves() async {
    final url =
        'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/fetch_elective_leaves';
    final headers = {
      'Content-Type': 'application/json',
    };
    final body = {"account_id": 1, "employee_id": 4};

    try {
      final response = await http.post(
        Uri.parse(url),
        headers: headers,
        body: json.encode(body),
      );

      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        throw Exception('Failed to fetch elective leaves');
      }
    } catch (e) {
      throw Exception('Failed to fetch elective leaves: $e');
    }
  }

  static Future<List<dynamic>> fetchApprovedWfh(
      String accountId, String employeeId) async {
    final response = await http.post(
      Uri.parse(
          'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/fetch_approved_wfh'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, String>{
        'account_id': accountId,
        'employee_id': employeeId,
      }),
    );

    if (response.statusCode == 200) {
      return jsonDecode(response.body) as List<dynamic>;
    } else {
      throw Exception('Failed to fetch approved wfh');
    }
  }

  static Future<List<dynamic>> fetchDeniedWfh(
      String accountId, String employeeId) async {
    final response = await http.post(
      Uri.parse(
          'https://pw-bms-dev.portalwiz.in/laravelapi/public/api/fetch_cancelled_wfh'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, String>{
        'account_id': accountId,
        'employee_id': employeeId,
      }),
    );

    if (response.statusCode == 200) {
      return jsonDecode(response.body) as List<dynamic>;
    } else {
      throw Exception('Failed to fetch cancelled wfh');
    }
  }
}
